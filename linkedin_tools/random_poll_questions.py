import random
def get_random_question():
    questions = [
    {"question": "Who developed Python Programming Language?", "options": ["Guido van Rossum", "Rasmus Lerdorf", "Wick van Rossum", "Niene Stom"], "answer": "Guido van Rossum"},
    {"question": "Which type of programming does Python support?", "options": ["Object-oriented", "Structured", "Functional", "All of these"], "answer": "All of these"},
    {"question": "Is Python case sensitive with identifiers?", "options": ["No", "Yes", "Machine dependent", "None of these"], "answer": "Yes"},
    {"question": "Python file extension is?", "options": [".py", ".python", ".pl", ".p"], "answer": ".py"},
    {"question": "Python code is?", "options": ["Compiled & Interpreted", "Neither", "Only compiled", "Only interpreted"], "answer": "Compiled & Interpreted"},
    {"question": "Keywords in Python are in?", "options": ["Capitalized", "Lowercase", "UPPER CASE", "None"], "answer": "Lowercase"},
    {"question": "Python defines code blocks by?", "options": ["Indentation", "Key", "Brackets", "All of these"], "answer": "Indentation"},
    {"question": "Keyword to define a function in Python?", "options": ["def", "Function", "Fun", "Define"], "answer": "def"},
    {"question": "Symbol for single-line comment?", "options": ["#", "//", "!", "/*"], "answer": "#"},
    {"question": "Python version function?", "options": ["sys.version()", "sys.version", "sys.ver(1)", "sys.ver(0)"], "answer": "sys.version()"},
    {"question": "Python supports creating anonymous functions using:", "options": ["lambda", "anonymous", "pi", "None"], "answer": "lambda"},
    {"question": "Order of precedence in Python?", "options": ["Parentheses, Exponential, MDAS", "Parentheses, Exponential, DASM", "Parentheses, Exponential, MDAS", "Exponential, Parentheses, MDAS"], "answer": "Parentheses, Exponential, MDAS"},
    {"question": "Pip stands for?", "options": ["Pip Installs Packages", "Python Installs Pip", "Preferred Installer Program", "None"], "answer": "Preferred Installer Program"},
    {"question": "Which is true for variable names?", "options": ["Unlimited length", "Underscore & ampersand", "Private uses leading/trailing __", "None of these"], "answer": "Unlimited length"},
    {"question": "Python's truncation division operator?", "options": ["//", "/", "%", "|"], "answer": "//"},
    {"question": "Which is a built-in function?", "options": ["print()", "factorial()", "seed()", "sqrt()"], "answer": "print()"},
    {"question": "Use of the `id()` function?", "options": ["Returns object identity", "No unique ID for object", "Both", "None"], "answer": "Returns object identity"},
    {"question": "Which is NOT a core data type?", "options": ["Class", "Tuples", "Lists", "Dictionary"], "answer": "Class"},
    {"question": "What is a Python package?", "options": ["Set of main modules", "Folder of Python modules", "Files with Python defs", "Python module programs"], "answer": "Folder of Python modules"},
    {"question": "Order of namespaces for identifier?", "options": ["Local, Global, Built-in", "Built-in, Global, Local", "Built-in, Local, Global", "Global, Local, Built-in"], "answer": "Local, Global, Built-in"},
    {"question": "Which is NOT a Python keyword?", "options": ["eval", "pass", "assert", "nonlocal"], "answer": "eval"},
    {"question": "Command line option parser?", "options": ["getopt", "getarg", "main", "os"], "answer": "getopt"},
    {"question": "Arithmetic operator invalid for strings?", "options": ["*", "-", "+", "All of these"], "answer": "-"},
    {"question": "Creates an empty set?", "options": ["set()", "[]", "{}", "()"], "answer": "set()"},
    {"question": "To add an element to a list:", "options": ["list1.append(5)", "list1.addEnd(5)", "list1.addLast(5)", "list1.add(5)"], "answer": "list1.append(5)"},
    {"question": "Use of functions in Python?", "options": ["Reusable pieces of code", "No modularity", "Can’t create functions", "All of these"], "answer": "Reusable pieces of code"},
    {"question": "Max length of identifier?", "options": ["79 chars", "63 chars", "31 chars", "No limit"], "answer": "79 chars"},
    {"question": "Two main types of functions?", "options": ["Built-in, User-defined", "System functions", "Custom functions", "User functions"], "answer": "Built-in, User-defined"},
    {"question": "Which is a Python tuple?", "options": ["(1, 2, 3)", "{1, 2, 3}", "[1, 2, 3]", "{}"], "answer": "(1, 2, 3)"},
    {"question": "Python DocString feature?", "options": ["Access with __doc__", "Every function needs docstring", "Doc for modules, classes, methods", "All of these"], "answer": "All of these"},
    {"question": "Pickling in Python means?", "options": ["Object to byte stream", "Byte stream to object", "Datatable to list", "List to datatable"], "answer": "Object to byte stream"},
    {"question": "Keyword to define a class?", "options": ["class", "def", "object", "type"], "answer": "class"},
    {"question": "Initializes a class instance?", "options": ["__init__", "__new__", "__start__", "__begin__"], "answer": "__init__"},
    {"question": "How to create an object?", "options": ["ClassName()", "new ClassName", "ClassName.create()", "ClassName.new()"], "answer": "ClassName()"},
    {"question": "Defines class’s string representation?", "options": ["__str__", "__repr__", "__format__", "__display__"], "answer": "__str__"},
    {"question": "What allows classes to inherit?", "options": ["Inheritance", "Encapsulation", "Abstraction", "Polymorphism"], "answer": "Inheritance"},
    {"question": "How to define a class method?", "options": ["def method(self)", "function method(self)", "method def(self)", "create method(self)"], "answer": "def method(self)"},
    {"question": "Provides unambiguous object string?", "options": ["__repr__", "__str__", "__format__", "__info__"], "answer": "__repr__"},
    {"question": "Access object’s attributes?", "options": ["object.attribute", "object[attribute]", "object->attribute", "object:attribute"], "answer": "object.attribute"},
    {"question": "Abstract class means?", "options": ["Can’t instantiate", "No methods", "Only inherited", "Static methods only"], "answer": "Can’t instantiate"},
    {"question": "Method overriding is used for?", "options": ["Redefining methods", "Changing method args", "Removing methods", "Deleting methods"], "answer": "Redefining methods"},
    {"question": "Private attribute in Python?", "options": ["__attribute", "_attribute", "attribute__", "attribute_"], "answer": "__attribute"},
    {"question": "Which method is static?", "options": ["@staticmethod", "@class", "@method", "@staticmethodmethod"], "answer": "@staticmethod"},
    {"question": "To raise an exception, use:", "options": ["raise", "throw", "error", "except"], "answer": "raise"},
    {"question": "To catch exceptions, use:", "options": ["try-except", "catch-finally", "raise-try", "throw-except"], "answer": "try-except"},
    {"question": "Base class for exceptions?", "options": ["Exception", "Error", "BaseException", "BaseError"], "answer": "BaseException"},
    {"question": "Which handles multiple exceptions?", "options": ["Multiple except blocks", "One except block", "try-try-except", "raise multiple"], "answer": "Multiple except blocks"},
    {"question": "When to use `finally`?", "options": ["Always executes", "Never executes", "Executes on success", "Executes on failure"], "answer": "Always executes"},
    {"question": "What does `with` statement do?", "options": ["Simplifies try-finally", "Raises exceptions", "Avoids errors", "Ignores failures"], "answer": "Simplifies try-finally"},
    {"question": "Which imports a module?", "options": ["import", "load", "use", "include"], "answer": "import"},
    {"question": "To import from a module, use:", "options": ["from module import name", "import module", "module(name)", "use module.name"], "answer": "from module import name"},
    {"question": "What does `dir()` function do?", "options": ["Lists object attributes", "Deletes object attributes", "Modifies object attributes", "Creates object attributes"], "answer": "Lists object attributes"},
    {"question": "Removes an element from a set?", "options": ["set1.remove(x)", "set1.delete(x)", "set1.discard(x)", "set1.pop(x)"], "answer": "set1.remove(x)"},
    {"question": "Which is a mutable type?", "options": ["List", "Tuple", "Int", "String"], "answer": "List"},
    {"question": "To check a variable type:", "options": ["type(var)", "var.type", "isinstance(var)", "typeof(var)"], "answer": "type(var)"},
    {"question": "Which keyword defines a generator?", "options": ["yield", "return", "generator", "def"], "answer": "yield"},
    {"question": "To get length of a list:", "options": ["len(list1)", "list1.size()", "length(list1)", "list1.len()"], "answer": "len(list1)"},
    {"question": "What is `lambda` used for?", "options": ["Anonymous functions", "Classes", "Exceptions", "Importing modules"], "answer": "Anonymous functions"},
    {"question": "How to create a list?", "options": ["[1, 2, 3]", "(1, 2, 3)", "{1, 2, 3}", "list(1, 2, 3)"], "answer": "[1, 2, 3]"},
    {"question": "How to delete a list item?", "options": ["del list1[0]", "list1.remove(0)", "pop list1[0]", "list1.clear(0)"], "answer": "del list1[0]"},
    {"question": "How to merge two dictionaries?", "options": ["dict1.update(dict2)", "dict1.add(dict2)", "dict1.extend(dict2)", "dict1.append(dict2)"], "answer": "dict1.update(dict2)"},
    {"question": "How to reverse a list?", "options": ["list1.reverse()", "list1[::-1]", "reversed(list1)", "list1.backwards()"], "answer": "list1.reverse()"},
    {"question": "To sort a list of numbers:", "options": ["list1.sort()", "list1.order()", "list1.sorted()", "sort(list1)"], "answer": "list1.sort()"},
    {"question": "Which is a set in Python?", "options": ["{1, 2, 3}", "[1, 2, 3]", "(1, 2, 3)", "list(1, 2, 3)"], "answer": "{1, 2, 3}"},
    {"question": "Which defines a set?", "options": ["{1, 2, 3}", "[1, 2, 3]", "(1, 2, 3)", "list(1, 2, 3)"], "answer": "{1, 2, 3}"},
    {"question": "How to create a dictionary?", "options": ["{'key': 'value'}", "['key', 'value']", "('key', 'value')", "{key: value}"], "answer": "{'key': 'value'}"},
    {"question": "Which is immutable?", "options": ["Tuple", "List", "Dictionary", "Set"], "answer": "Tuple"},
    {"question": "Which modifies a string?", "options": ["replace()", "append()", "delete()", "remove()"], "answer": "replace()"},
    {"question": "To count occurrences in string:", "options": ["count()", "find()", "length()", "search()"], "answer": "count()"},
    {"question": "To get index of a substring:", "options": ["find()", "count()", "search()", "index()"], "answer": "index()"},
    {"question": "How to strip whitespace?", "options": ["strip()", "delete()", "remove()", "cut()"], "answer": "strip()"},
    {"question": "To join list items into a string:", "options": ["''.join(list1)", "list1.add('')", "string(list1)", "''.concat(list1)"], "answer": "''.join(list1)"},
    {"question": "Which operator for identity?", "options": ["is", "==", "in", "id"], "answer": "is"},
    {"question": "Which is a list method?", "options": ["append()", "add()", "insert()", "push()"], "answer": "append()"},
    {"question": "How to slice a list?", "options": ["list1[0:2]", "list1[0,2]", "slice(list1,0,2)", "list1.cut(0,2)"], "answer": "list1[0:2]"},
    {"question": "To check key in a dictionary:", "options": ["key in dict1", "dict1.key", "key.has(dict1)", "dict1.contains(key)"], "answer": "key in dict1"},
    {"question": "Which is a list comprehension?", "options": ["[x for x in list1]", "{x for x in list1}", "(x for x in list1)", "list1[x for x]"], "answer": "[x for x in list1]"},
    {"question": "How to raise a number to power?", "options": ["x ** y", "pow(x,y)", "x ^ y", "x*y^2"], "answer": "x ** y"},
    {"question": "How to iterate through a list?", "options": ["for x in list1", "iterate(list1)", "list1.forEach()", "list1.iterate()"], "answer": "for x in list1"},
    {"question": "To remove duplicates in a list:", "options": ["list(set(list1))", "remove_duplicates(list1)", "set(list1)", "del_duplicates(list1)"], "answer": "list(set(list1))"},
    {"question": "Which is used for rounding?", "options": ["round()", "floor()", "ceil()", "truncate()"], "answer": "round()"},
    {"question": "Which is a tuple?", "options": ["(1, 2, 3)", "[1, 2, 3]", "{1, 2, 3}", "tuple[1, 2, 3]"], "answer": "(1, 2, 3)"},
    {"question": "Which data type is ordered?", "options": ["List", "Set", "Dictionary", "Integer"], "answer": "List"},
    {"question": "Which keyword creates a class?", "options": ["class", "def", "object", "new"], "answer": "class"},
    {"question": "To delete an object, use:", "options": ["del obj", "remove(obj)", "delete obj", "clear(obj)"], "answer": "del obj"},
    {"question": "Which represents a float?", "options": ["10.5", "10", "'10'", "10,5"], "answer": "10.5"},
    {"question": "How to add an item to a list?", "options": ["append(item)", "insert(item)", "add(item)", "push(item)"], "answer": "append(item)"},
    {"question": "Which is the correct syntax?", "options": ["if x > 5:", "if (x > 5)", "if x > 5 then", "if x > 5 do"], "answer": "if x > 5:"},
    {"question": "Which function gets user input?", "options": ["input()", "read()", "get()", "ask()"], "answer": "input()"},
    {"question": "Which checks instance type?", "options": ["isinstance()", "type()", "class()", "object()"], "answer": "isinstance()"},
    {"question": "What keyword for inheritance?", "options": ["class Child(Parent)", "class Child extends Parent", "class Child > Parent", "class Parent.Child"], "answer": "class Child(Parent)"},
    {"question": "Which method is a constructor?", "options": ["__init__()", "__construct__()", "__start__()", "__build__()"], "answer": "__init__()"},
    {"question": "Which checks for empty list?", "options": ["if not list1", "if list1.empty()", "if len(list1) == 0", "if list1 == []"], "answer": "if not list1"},
    {"question": "To swap values in Python:", "options": ["a, b = b, a", "swap(a, b)", "a = b; b = a", "change(a, b)"], "answer": "a, b = b, a"},
    {"question": "Which imports everything?", "options": ["from module import *", "import module.all", "use module.*", "from module include all"], "answer": "from module import *"},
    {"question": "What is the boolean value of 0?", "options": ["False", "True", "Undefined", "Null"], "answer": "False"},
    {"question": "To compare two variables:", "options": ["==", "equals()", "compare()", "is"], "answer": "=="},
    {"question": "Which is a ternary operator?", "options": ["x if y else z", "x else y if z", "y if z else x", "z if x else y"], "answer": "x if y else z"},
    {"question": "What is the type of None?", "options": ["NoneType", "Null", "Object", "Undefined"], "answer": "NoneType"},
    {"question": "Which checks for divisibility?", "options": ["x % y == 0", "x / y == 0", "divide(x, y)", "x // y == 0"], "answer": "x % y == 0"},
    {"question": "How to declare a set?", "options": ["set([1, 2, 3])", "{1, 2, 3}", "(1, 2, 3)", "[1, 2, 3]"], "answer": "{1, 2, 3}"},
    {"question": "How to convert a string to int?", "options": ["int('10')", "str(10)", "float('10')", "toInt('10')"], "answer": "int('10')"},
    {"question": "What does `continue` do?", "options": ["Skips to next iteration", "Stops loop", "Restarts loop", "Exits function"], "answer": "Skips to next iteration"},
    {"question": "How to get the length of a list?", "options": ["len(list1)", "list1.length()", "size(list1)", "list1.size()"], "answer": "len(list1)"},
    {"question": "Which function converts to string?", "options": ["str()", "toString()", "string()", "stringify()"], "answer": "str()"},
    {"question": "Which is a logical operator?", "options": ["and", "add", "==", "++"], "answer": "and"},
    {"question": "Which starts a for loop?", "options": ["for x in list1:", "for each x in list1", "for (x in list1)", "for x from list1:"], "answer": "for x in list1:"},
    {"question": "To sort a list in-place:", "options": ["list1.sort()", "sorted(list1)", "sort(list1)", "list1.ordered()"], "answer": "list1.sort()"},
    {"question": "To get a character’s ASCII:", "options": ["ord('a')", "chr('a')", "ascii('a')", "int('a')"], "answer": "ord('a')"},
    {"question": "What defines a frozen set?", "options": ["Immutable set", "Mutable set", "Empty set", "Dynamic set"], "answer": "Immutable set"},
    {"question": "How to copy a list?", "options": ["list1.copy()", "list(list1)", "copy(list1)", "list1.clone()"], "answer": "list(list1)"},
    {"question": "Which operator for modulo?", "options": ["%", "//", "**", "~"], "answer": "%"},
    {"question": "Which is a keyword?", "options": ["yield", "function", "method", "var"], "answer": "yield"},
    {"question": "Which method adds to a set?", "options": ["add()", "insert()", "append()", "extend()"], "answer": "add()"},
    {"question": "Which method removes an item?", "options": ["remove()", "delete()", "pop()", "drop()"], "answer": "remove()"},
    {"question": "To reverse a list:", "options": ["list1.reverse()", "list1[::-1]", "reversed(list1)", "list1.revert()"], "answer": "list1.reverse()"},
    {"question": "To read a file line by line:", "options": ["readline()", "read()", "readall()", "scanline()"], "answer": "readline()"},
    {"question": "How to create a lambda function?", "options": ["lambda x: x + 1", "def lambda(x): x + 1", "lambda (x): x + 1", "function(x): return x + 1"], "answer": "lambda x: x + 1"},
    {"question": "How to merge two lists?", "options": ["list1 + list2", "merge(list1, list2)", "list1.add(list2)", "list1.append(list2)"], "answer": "list1 + list2"},
    {"question": "Which represents False?", "options": ["0", "1", "-1", "'False'"], "answer": "0"},
    {"question": "Which defines a function?", "options": ["def my_func():", "function my_func():", "func my_func():", "create my_func():"], "answer": "def my_func():"},
    {"question": "Which is a floating-point value?", "options": ["3.14", "3", "'3.14'", "[3.14]"], "answer": "3.14"},
    {"question": "What is a tuple?", "options": ["Immutable sequence", "Mutable list", "Dynamic array", "Frozen dictionary"], "answer": "Immutable sequence"},
    {"question": "Which creates an empty set?", "options": ["set()", "{}", "[]", "set([])"], "answer": "set()"},
    {"question": "How to raise an exception?", "options": ["raise ValueError", "except ValueError", "throw ValueError", "error ValueError"], "answer": "raise ValueError"},
    {"question": "Which method finds a substring?", "options": ["find()", "locate()", "search()", "indexOf()"], "answer": "find()"},
    {"question": "Which deletes a key in a dict?", "options": ["del dict1[key]", "dict1.delete(key)", "remove dict1[key]", "dict1.remove(key)"], "answer": "del dict1[key]"},
    {"question": "How to join a list to a string?", "options": ["''.join(list1)", "concat(list1)", "list1.merge('')", "''.concat(list1)"], "answer": "''.join(list1)"},
    {"question": "How to import a module?", "options": ["import module_name", "include module_name", "use module_name", "require module_name"], "answer": "import module_name"},
    {"question": "Which is a ternary operator?", "options": ["a if condition else b", "if condition then a else b", "a when condition else b", "if condition a else b"], "answer": "a if condition else b"},
    {"question": "How to slice a list?", "options": ["list1[start:end]", "list1.slice(start, end)", "list1.sub(start, end)", "list1.get(start:end)"], "answer": "list1[start:end]"},
    {"question": "How to convert int to hex?", "options": ["hex(255)", "int(255).hex()", "toHex(255)", "convertToHex(255)"], "answer": "hex(255)"},
    {"question": "Which function rounds numbers?", "options": ["round(3.14)", "ceil(3.14)", "floor(3.14)", "truncate(3.14)"], "answer": "round(3.14)"},
    {"question": "Which method sorts a list?", "options": ["sorted(list1)", "arrange(list1)", "list1.order()", "sort(list1)"], "answer": "sorted(list1)"},
    {"question": "Which checks if key exists?", "options": ["'key' in dict1", "dict1.hasKey('key')", "dict1.includes('key')", "dict1.find('key')"], "answer": "'key' in dict1"},
    {"question": "How to check if list is empty?", "options": ["not list1", "len(list1) == 0", "list1.isEmpty()", "list1 == []"], "answer": "not list1"},
    {"question": "How to read user input?", "options": ["input()", "get_input()", "read_input()", "stdin()"], "answer": "input()"},
    {"question": "Which defines a method in class?", "options": ["def method(self):", "function method(self):", "def method():", "method(self):"], "answer": "def method(self):"},
    {"question": "What is list comprehension?", "options": ["[x for x in list1]", "list(x for x in list1)", "(x for x in list1)", "list1.loop(x)"], "answer": "[x for x in list1]"},
    {"question": "How to handle exceptions?", "options": ["try-except", "try-catch", "handle-error", "error-try"], "answer": "try-except"},
    {"question": "How to convert a string to int?", "options": ["int('123')", "str(123)", "convert('123')", "int.to('123')"], "answer": "int('123')"},
    {"question": "Which method removes last item?", "options": ["pop()", "remove()", "del()", "discard()"], "answer": "pop()"},
    {"question": "What keyword creates a generator?", "options": ["yield", "return", "send", "generate"], "answer": "yield"},
    {"question": "How to remove duplicates in list?", "options": ["set(list1)", "remove_duplicates(list1)", "list1.unique()", "filter(list1)"], "answer": "set(list1)"},
    {"question": "Which method adds item to list?", "options": ["append()", "add()", "insert()", "push()"], "answer": "append()"},
    {"question": "How to start a for loop?", "options": ["for item in list1:", "foreach item in list1:", "for_each item in list1:", "loop item in list1:"], "answer": "for item in list1:"},
    {"question": "Which returns the length of list?", "options": ["len(list1)", "length(list1)", "size(list1)", "count(list1)"], "answer": "len(list1)"},
    {"question": "Which method reverses a list?", "options": ["reverse()", "flip()", "invert()", "swap()"], "answer": "reverse()"},
    {"question": "How to check the data type?", "options": ["type(var1)", "checkType(var1)", "isType(var1)", "var1.type()"], "answer": "type(var1)"},
    {"question": "Which operator compares values?", "options": ["==", "=", "=>", "is"], "answer": "=="},
    {"question": "How to end a while loop?", "options": ["break", "exit", "end", "stop"], "answer": "break"},
    {"question": "Which method capitalizes a string?", "options": ["capitalize()", "upper()", "title()", "case()"], "answer": "capitalize()"},
    {"question": "How to create a class?", "options": ["class MyClass:", "create class MyClass:", "MyClass() -> class", "define MyClass:"], "answer": "class MyClass:"},
    {"question": "How to stop a function?", "options": ["return", "stop", "break", "exit"], "answer": "return"},
    {"question": "Which is used for inheritance?", "options": ["class Child(Parent)", "class Child inherits Parent", "class Child: Parent", "class Child with Parent"], "answer": "class Child(Parent)"},
    {"question": "Which loop iterates indefinitely?", "options": ["while True", "for True", "repeat forever", "loop forever"], "answer": "while True"},
    {"question": "What does 'pass' do in code?", "options": ["Skips execution", "Ends loop", "Breaks out", "Returns result"], "answer": "Skips execution"},
    {"question": "Which operator is used for exponent?", "options": ["**", "^", "exp", "power()"], "answer": "**"},
    {"question": "How to get current time?", "options": ["time.time()", "now()", "time.now()", "datetime()"], "answer": "time.time()"},
    {"question": "How to combine two lists?", "options": ["list1 + list2", "merge(list1, list2)", "concat(list1, list2)", "append(list2 to list1)"], "answer": "list1 + list2"},
    {"question": "How to open a file in Python?", "options": ["open('file.txt')", "read('file.txt')", "load('file.txt')", "file('file.txt')"], "answer": "open('file.txt')"},
    {"question": "Which keyword defines a method?", "options": ["def", "function", "define", "method"], "answer": "def"},
    {"question": "How to create an empty list?", "options": ["list1 = []", "list1 = ()", "list1 = {}", "list1 = new list()"], "answer": "list1 = []"},
    {"question": "Which operator is for division?", "options": ["/", "//", "div", "divide()"], "answer": "/"},
    {"question": "Which is immutable?", "options": ["tuple", "list", "dict", "set"], "answer": "tuple"},
    {"question": "How to declare a constant?", "options": ["Use uppercase", "const keyword", "let keyword", "assign keyword"], "answer": "Use uppercase"},
    {"question": "What does isinstance() check?", "options": ["Data type", "Memory size", "Equality", "Length"], "answer": "Data type"},
    {"question": "Which is a built-in function?", "options": ["len()", "size()", "length()", "dimension()"], "answer": "len()"},
    {"question": "How to create a set?", "options": ["set1 = set()", "set1 = {}", "set1 = []", "set1 = list()"], "answer": "set1 = set()"},
    {"question": "How to create a private method?", "options": ["__method()", "_method()", "private method()", "hide method()"], "answer": "__method()"},
    {"question": "Which is a dictionary method?", "options": ["keys()", "elements()", "items()", "properties()"], "answer": "keys()"},
    {"question": "How to check for a key in dict?", "options": ["key in dict", "dict.has(key)", "dict.exists(key)", "find(key in dict)"], "answer": "key in dict"},
    {"question": "What is the output of 2**3?", "options": ["8", "6", "9", "12"], "answer": "8"},
    {"question": "Which method removes whitespace?", "options": ["strip()", "trim()", "clear()", "clean()"], "answer": "strip()"},
    {"question": "How to handle exceptions?", "options": ["try/except", "if/else", "check/catch", "validate/error"], "answer": "try/except"},
    {"question": "How to create a lambda function?", "options": ["lambda x: x + 2", "def lambda(x): x+2", "lambda(x) = x + 2", "create lambda x = x + 2"], "answer": "lambda x: x + 2"},
    {"question": "How to find the max value?", "options": ["max(list1)", "greatest(list1)", "largest(list1)", "top(list1)"], "answer": "max(list1)"},
    {"question": "Which method sorts a list?", "options": ["sort()", "order()", "arrange()", "sequence()"], "answer": "sort()"},
    {"question": "What is the output of 5//2?", "options": ["2", "2.5", "3", "1"], "answer": "2"},
    {"question": "How to check if list is empty?", "options": ["if not list1", "if len(list1) == 0", "if list1.empty()", "if list1.isEmpty()"], "answer": "if not list1"},
]
    random.shuffle(questions)
    selected_question = questions.pop()

    return selected_question

